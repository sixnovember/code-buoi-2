//bai 1
#include <stdio.h>

int main() {
    int i;

    printf("Các số nguyên có 2 chữ số và là bội của 7:\n");

    for (i = 10; i <= 99; i++) {
        if (i % 7 == 0) {
            printf("%d\n", i);
        }
    }

    return 0;
}


//bai 2
#include <stdio.h>
#include <math.h> // Để sử dụng hàm sqrt()

// Hàm kiểm tra xem một số có phải là số chính phương không
int isPerfectSquare(int num) {
    int squareRoot = sqrt(num); // Lấy căn bậc 2 của số
    return (squareRoot * squareRoot == num); // Kiểm tra xem bình phương của căn bậc 2 có bằng số ban đầu không
}

// Hàm đếm số chính phương nhỏ hơn n và in ra chúng
void countAndPrintPerfectSquares(int n) {
    int count = 0;
    printf("Các số chính phương nhỏ hơn %d là:\n", n);
    for (int i = 1; i < n; i++) {
        if (isPerfectSquare(i)) {
            printf("%d ", i);
            count++;
        }
    }
    printf("\nTổng số chính phương nhỏ hơn %d là: %d\n", n, count);
}

int main() {
    int n;

    printf("Nhập một số nguyên dương n: ");
    scanf("%d", &n);

    countAndPrintPerfectSquares(n); // Gọi hàm để đếm và in ra các số chính phương nhỏ hơn n

//bai 3
using System;
using System.Windows.Forms;

namespace SortingApp {
    public partial class MainForm : Form {
        public MainForm() {
            InitializeComponent();
        }

        private void btnSort_Click(object sender, EventArgs e) {
            // Lấy dữ liệu từ TextBox và chuyển đổi thành mảng số nguyên
            string input = txtInput.Text;
            string[] numbers = input.Split(',');
            int[] arr = new int[numbers.Length];
            for (int i = 0; i < numbers.Length; i++) {
                if (!int.TryParse(numbers[i], out arr[i])) {
                    MessageBox.Show("Dữ liệu nhập không hợp lệ!");
                    return;
                }
            }

            // Sắp xếp mảng theo thuật toán được chọn
            switch (cbSortAlgorithm.SelectedItem.ToString()) {
                case "Insertion Sort":
                    InsertionSort(arr);
                    break;
                case "Selection Sort":
                    SelectionSort(arr);
                    break;
                case "Bubble Sort":
                    BubbleSort(arr);
                    break;
                case "Merge Sort":
                    MergeSort(arr, 0, arr.Length - 1);
                    break;
                default:
                    MessageBox.Show("Chưa chọn thuật toán sắp xếp!");
                    return;
            }

            // Hiển thị mảng sau khi sắp xếp lên TextBox
            txtResult.Text = string.Join(", ", arr);
        }

        // Các hàm sắp xếp
        private void InsertionSort(int[] arr) { /* implement */ }
        private void SelectionSort(int[] arr) { /* implement */ }
        private void BubbleSort(int[] arr) { /* implement */ }
        private void MergeSort(int[] arr, int l, int r) { /* implement */ }
    }
}



    return 0;
}
